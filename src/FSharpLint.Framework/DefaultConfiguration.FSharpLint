<?xml version="1.0" encoding="utf-8"?>
<FSharpLintSettings>
  <IgnoreFiles>
    <![CDATA[
      assemblyinfo.*
    ]]>
  </IgnoreFiles>
  
  <Analysers>
    <Hints>
      <Hints>
        <![CDATA[
          not (a =  b) ===> a <> b
          not (a <> b) ===> a =  b
          not (a >  b) ===> a <= b
          not (a >= b) ===> a <  b
          not (a <  b) ===> a >= b
          not (a <= b) ===> a >  b
          compare x y <> 1 ===> x <= y
          compare x y = -1 ===> x < y
          compare x y <> -1 ===> x >= y
          compare x y = 1 ===> x > y
                
          List.head (List.sort x) ===> List.min x
          List.head (List.sortBy f x) ===> List.minBy f x
                
          List.map f (List.map g x) ===> List.map (g >> f) x
          Array.map f (Array.map g x) ===> Array.map (g >> f) x
          Seq.map f (Seq.map g x) ===> Seq.map (g >> f) x
          List.nth x 0 ===> List.head x
          List.map f (List.replicate n x) ===> List.replicate n (f x)
          List.rev (List.rev x) ===> x
          Array.rev (Array.rev x) ===> x
          List.fold (@) [] ===> List.concat
          List.map id ===> id
          Array.map id ===> id
          Seq.map id ===> id
          (List.length x) = 0 ===> List.isEmpty x
          (Array.length x) = 0 ===> Array.isEmpty x
          (Seq.length x) = 0 ===> Seq.isEmpty x
          x = [] ===> List.isEmpty x
          x = [||] ===> Array.isEmpty x
          (List.length x) <> 0 ===> not (List.isEmpty x)
          (Array.length x) <> 0 ===> not (Array.isEmpty x)
          (Seq.length x) <> 0 ===> not (Seq.isEmpty x)
          (List.length x) > 0 ===> not (List.isEmpty x)
          (Array.length x) <> 0 ===> not (Array.isEmpty x)
          (Seq.length x) <> 0 ===> not (Seq.isEmpty x)
                
          List.isEmpty (List.filter f x) ===> not (List.exists f x)
          Array.isEmpty (Array.filter f x) ===> not (Array.exists f x)
          Seq.isEmpty (Seq.filter f x) ===> not (Seq.exists f x)
          not (List.isEmpty (List.filter f x)) ===> List.exists f x
          not (Array.isEmpty (Array.filter f x)) ===> Array.exists f x
          not (Seq.isEmpty (Seq.filter f x)) ===> Seq.exists f x
                
          List.length x >= 0 ===> true
          Array.length x >= 0 ===> true
          Seq.length x >= 0 ===> true
                
          x = true ===> x
          x = false ===> not x
          true = a ===> a
          false = a ===> not a
          a <> true ===> not a
          a <> false ===> a
          true <> a ===> not a
          false <> a ===> a
          if a then true else false ===> a
          if a then false else true ===> not a
          not (not x) ===> x
                
          (fst x, snd x) ===> x
                
          true && x ===> x
          false && x ===> false
          true || x ===> true
          false || x ===> x
          not true ===> false
          not false ===> true
          fst (x, y) ===> x
          snd (x, y) ===> y
          List.fold f x [] ===> x
          Array.fold f x [||] ===> x
          List.foldBack f x [] ===> x
          Array.foldBack f x [||] ===> x
          x - 0 ===> x
          x * 1 ===> x
          x / 1 ===> x
                
          List.fold (+) 0 ===> List.sum
          Array.fold (+) 0 ===> Array.sum
          Seq.fold (+) 0 ===> Seq.sum
                
          List.empty ===> []
          Array.empty ===> [||]
                
          x::[] ===> [x]
                
          x @ [] ===> x
                
          List.isEmpty [] ===> true
          Array.isEmpty [||] ===> true
                
          fun _ -> () ===> ignore
          fun x -> x ===> id
          id x ===> x
          id >> f ===> f
          f >> id ===> f
        ]]>
      </Hints>
      <Enabled>True</Enabled>
    </Hints>

    <NameConventions>
      <Rules>
        <IdentifiersMustNotContainUnderscores>
          <Enabled>True</Enabled>
        </IdentifiersMustNotContainUnderscores>
        
        <InterfaceNamesMustBeginWithI>
          <Enabled>True</Enabled>
        </InterfaceNamesMustBeginWithI>
        
        <ExceptionNamesMustEndWithException>
          <Enabled>True</Enabled>
        </ExceptionNamesMustEndWithException>
        
        <TypeNamesMustBePascalCase>
          <Enabled>True</Enabled>
        </TypeNamesMustBePascalCase>
        
        <RecordFieldNamesMustBePascalCase>
          <Enabled>True</Enabled>
        </RecordFieldNamesMustBePascalCase>
        
        <EnumCasesMustBePascalCase>
          <Enabled>True</Enabled>
        </EnumCasesMustBePascalCase>
        
        <ModuleNamesMustBePascalCase>
          <Enabled>True</Enabled>
        </ModuleNamesMustBePascalCase>
        
        <LiteralNamesMustBePascalCase>
          <Enabled>True</Enabled>
        </LiteralNamesMustBePascalCase>
        
        <NamespaceNamesMustBePascalCase>
          <Enabled>True</Enabled>
        </NamespaceNamesMustBePascalCase>
        
        <MemberNamesMustBePascalCase>
          <Enabled>True</Enabled>
        </MemberNamesMustBePascalCase>
        
        <ParameterMustBeCamelCase>
          <Enabled>True</Enabled>
        </ParameterMustBeCamelCase>
        
        <NonPublicValuesCamelCase>
          <Enabled>True</Enabled>
        </NonPublicValuesCamelCase>
      </Rules>
      <Enabled>True</Enabled>
    </NameConventions>
    
    <SourceLength>
      <Rules>
        <MaxLinesInFunction>
          <Enabled>True</Enabled>
          <Lines>70</Lines>
        </MaxLinesInFunction>
        
        <MaxLinesInLambdaFunction>
          <Enabled>True</Enabled>
          <Lines>5</Lines>
        </MaxLinesInLambdaFunction>
        
        <MaxLinesInMatchLambdaFunction>
          <Enabled>True</Enabled>
          <Lines>70</Lines>
        </MaxLinesInMatchLambdaFunction>
        
        <MaxLinesInValue>
          <Enabled>True</Enabled>
          <Lines>70</Lines>
        </MaxLinesInValue>
        
        <MaxLinesInConstructor>
          <Enabled>True</Enabled>
          <Lines>70</Lines>
        </MaxLinesInConstructor>
        
        <MaxLinesInMember>
          <Enabled>True</Enabled>
          <Lines>70</Lines>
        </MaxLinesInMember>
        
        <MaxLinesInProperty>
          <Enabled>True</Enabled>
          <Lines>70</Lines>
        </MaxLinesInProperty>
        
        <MaxLinesInClass>
          <Enabled>True</Enabled>
          <Lines>500</Lines>
        </MaxLinesInClass>
        
        <MaxLinesInEnum>
          <Enabled>True</Enabled>
          <Lines>500</Lines>
        </MaxLinesInEnum>
        
        <MaxLinesInUnion>
          <Enabled>True</Enabled>
          <Lines>500</Lines>
        </MaxLinesInUnion>
        
        <MaxLinesInRecord>
          <Enabled>True</Enabled>
          <Lines>500</Lines>
        </MaxLinesInRecord>
        
        <MaxLinesInModule>
          <Enabled>True</Enabled>
          <Lines>1000</Lines>
        </MaxLinesInModule>
      </Rules>
      <Enabled>True</Enabled>
    </SourceLength>
    
    <Typography>
      <Rules>
        <MaxLinesInFile>
          <Enabled>True</Enabled>
          <Lines>1000</Lines>
        </MaxLinesInFile>
        
        <MaxCharactersOnLine>
          <Enabled>True</Enabled>
          <Length>120</Length>
        </MaxCharactersOnLine>
        
        <NoTabCharacters>
          <Enabled>True</Enabled>
        </NoTabCharacters>
        
        <TrailingNewLineInFile>
          <Enabled>True</Enabled>
        </TrailingNewLineInFile>
        
        <TrailingWhitespaceOnLine>
          <Enabled>True</Enabled>
          <NumberOfSpacesAllowed>1</NumberOfSpacesAllowed>
          <OneSpaceAllowedAfterOperator>True</OneSpaceAllowedAfterOperator>
          <IgnoreBlankLines>True</IgnoreBlankLines>
        </TrailingWhitespaceOnLine>
      </Rules>
      <Enabled>True</Enabled>
    </Typography>
    
    <NestedStatements>
      <Enabled>True</Enabled>
      <Depth>8</Depth>
    </NestedStatements>
    
    <NumberOfItems>
      <Rules>
        <MaxNumberOfFunctionParameters>
          <Enabled>True</Enabled>
          <MaxItems>5</MaxItems>
        </MaxNumberOfFunctionParameters>
        
        <MaxNumberOfMembers>
          <Enabled>True</Enabled>
          <MaxItems>32</MaxItems>
        </MaxNumberOfMembers>
        
        <MaxNumberOfItemsInTuple>
          <Enabled>True</Enabled>
          <MaxItems>4</MaxItems>
        </MaxNumberOfItemsInTuple>
        
        <MaxNumberOfBooleanOperatorsInCondition>
          <Enabled>True</Enabled>
          <MaxItems>4</MaxItems>
        </MaxNumberOfBooleanOperatorsInCondition>
      </Rules>
      <Enabled>True</Enabled>
    </NumberOfItems>
    
    <RaiseWithTooManyArguments>
      <Rules>
        <FailwithWithSingleArgument>
          <Enabled>True</Enabled>
        </FailwithWithSingleArgument>

        <RaiseWithSingleArgument>
          <Enabled>True</Enabled>
        </RaiseWithSingleArgument>

        <NullArgWithSingleArgument>
          <Enabled>True</Enabled>
        </NullArgWithSingleArgument>

        <InvalidOpWithSingleArgument>
          <Enabled>True</Enabled>
        </InvalidOpWithSingleArgument>

        <FailwithfWithArgumentsMatchingFormatString>
          <Enabled>True</Enabled>
        </FailwithfWithArgumentsMatchingFormatString>

        <InvalidArgWithTwoArguments>
          <Enabled>True</Enabled>
        </InvalidArgWithTwoArguments>
      </Rules>
      <Enabled>True</Enabled>
    </RaiseWithTooManyArguments>
    
    <Binding>
      <Rules>
        <FavourIgnoreOverLetWild>
          <Enabled>True</Enabled>
        </FavourIgnoreOverLetWild>

        <UselessBinding>
          <Enabled>True</Enabled>
        </UselessBinding>

        <TupleOfWildcards>
          <Enabled>True</Enabled>
        </TupleOfWildcards>

        <WildcardNamedWithAsPattern>
          <Enabled>True</Enabled>
        </WildcardNamedWithAsPattern>
      </Rules>
      <Enabled>True</Enabled>
    </Binding>
    
    <FunctionReimplementation>
      <Rules>
        <ReimplementsFunction>
          <Enabled>True</Enabled>
        </ReimplementsFunction>

        <CanBeReplacedWithComposition>
          <Enabled>True</Enabled>
        </CanBeReplacedWithComposition>
      </Rules>
      <Enabled>True</Enabled>
    </FunctionReimplementation>
    
    <XmlDocumentation>
      <Rules>
        <ExceptionDefinitionHeader>
          <Enabled>False</Enabled>
        </ExceptionDefinitionHeader>
      </Rules>
      <Enabled>False</Enabled>
    </XmlDocumentation>
    
    <CyclomaticComplexity>
      <Enabled>True</Enabled>
      <MaxCyclomaticComplexity>10</MaxCyclomaticComplexity>
      <IncludeMatchStatements>False</IncludeMatchStatements>
    </CyclomaticComplexity>
  </Analysers>
</FSharpLintSettings>